// Image sizes at different breakpoints for shorter responsive povs
$pov-theme-button-width = 140px;

$dynamic-price = {
  grid-x: 60px,
  grid-y: 30px,
  start-x: -330px,
  start-y: 41px
};

$tempo-pov-height = {
  xs: 120px,
  s: 178px,
  m: 283px,
  l: 300px
};

// POV width at different breakpoints.
$tempo-pov-width = {
  xs: 546px,
  s: 809px,
  m: 1287px,
  l: 1364px
};

// Different off set for theme buttons
$pov-safe-zone-offset = {
  vertical-m: 38px,
  vertical-l: 40px,
  horizontal-m: 332px,
  horizontal-l: 352px
};

$tempo-pov-scaling-ratio = {
  xs: ($tempo-pov-height.xs / $tempo-pov-height.l),
  s: ($tempo-pov-height.s / $tempo-pov-height.l),
  m: ($tempo-pov-height.m / $tempo-pov-height.l)
};

// Mixins
$scaled-property($prop, $value) {
  if ($prop == font-size) {
    to-rem($prop, $value);
  } else {
    {$prop}: round($value);
  }
}

// This generates correctly scaled values for others
$generate-scaled-properties($prop, $value-l) {
  $scaled-property($prop, $value-l * $tempo-pov-scaling-ratio.xs);

  +breakpoint($breakpoint-s) {
    $scaled-property($prop, $value-l * $tempo-pov-scaling-ratio.s);
  }

  +breakpoint($breakpoint-m) {
    $scaled-property($prop, $value-l * $tempo-pov-scaling-ratio.m);
  }

  +breakpoint($breakpoint-l) {
    $scaled-property($prop, $value-l);
  }
}

$pov-base() {
  text-align: center;

  a {
    display: block;
  }
}

$pov-button($pov-safe-zone-offset, $pov-theme-button-width) {
  .PovThemeButton {
    position: absolute;
    left: 50%;
    bottom: $pov-safe-zone-offset.vertical-m;
    padding-top: 10px;

    background-color: $orange;
    color: $white;
    white-space: nowrap;

    +breakpoint($breakpoint-l) {
      bottom: $pov-safe-zone-offset.vertical-l;
    }

    &.PovThemeButton-center {
      transform: translateX(-50%);
    }

    &.PovThemeButton-left {
      margin-left: -1 * $pov-safe-zone-offset.horizontal-m;

      +breakpoint($breakpoint-l) {
        margin-left: -1 * $pov-safe-zone-offset.horizontal-l;
      }
    }

    &.PovThemeButton-right {
      margin-left: $pov-safe-zone-offset.horizontal-m;
      transform: translateX(-100%);

      +breakpoint($breakpoint-l) {
        margin-left: $pov-safe-zone-offset.horizontal-l;
      }
    }

    &:hover {
      background-color: $orange;
    }
  }
}

$pov-container($height) {
  position: relative;

  margin: 0 auto;
  height: $height.xs;

  overflow: hidden;

  +breakpoint($breakpoint-s) {
    height: $height.s;
  }

  +breakpoint($breakpoint-m) {
    height: $height.m;
  }

  +breakpoint($breakpoint-l) {
    height: $height.l;
  }
}

$pov-image($height, $width) {
  .ClickThroughImage {
    height: $height.xs;
    width: $width.xs;
    max-width: none;
    margin-left: 50%;

    transform: translateX(-50%);

    +breakpoint($breakpoint-s) {
      height: $height.s;
      width: $width.s;
    }

    +breakpoint($breakpoint-m) {
      height: $height.m;
      width: $width.m;
    }

    +breakpoint($breakpoint-l) {
      height: $height.l;
      width: $width.l;
    }
  }
}

$pov-dynamic-price($dynamic-price) {
  .DynamicPriceBubble {
    $generate-scaled-properties(height, 2 * $dynamic-price.grid-x);
    $generate-scaled-properties(width, 2 * $dynamic-price.grid-x);
    wmzindex("basic");

    position: absolute;
    left: 50%; // normalize to center

    border: 2px solid rgba($white, 0.5);

    background-clip: padding-box;
    color: $white;
    cursor: pointer; // for IE<11 which do not support pointer-events: none
    line-height: 1;
    pointer-events: none;

    +breakpoint($breakpoint-m) {
      border-width: 4px;
    }

    &.DynamicPriceBubble--noBorder {
      border-color: transparent;
    }

    &.DynamicPriceBubble--rollback {
      border-color: $yellow;
    }

    // horizontal positioning classes
    for $x in 0 2 3 4 5 6 7 9 {
      &.DynamicPriceBubble-x-{$x} {
        $generate-scaled-properties(margin-left, $dynamic-price.start-x + $x * $dynamic-price.grid-x);
      }
    }

    // vertical positioning classes
    for $y in 0 1 2 3 {
      &.DynamicPriceBubble-y-{$y} {
        $generate-scaled-properties(top, $dynamic-price.start-y + $y * $dynamic-price.grid-y);
      }
    }

    .DynamicPriceBubble-price {
      $generate-scaled-properties(bottom, 25px);
      $generate-scaled-properties(font-size, 40px);

      position: absolute;
      left: 0;

      width: 100%;

      color: inherit;

      // overrides for smallest breakpoint
      +breakpoint($breakpoint-xs-max, "max") {
        to-rem(font-size, 18px);

        bottom: 7px;
      }

      .sup {
        font-size: .5em;
        vertical-align: .65em; // aligns top of numbers
      }
    }

    .DynamicPriceBubble-text {
      $generate-scaled-properties(bottom, 68px);
      $generate-scaled-properties(font-size, 20px);

      position: absolute;
      left: 0;

      width: 100%;

      // overrides for smallest breakpoint
      +breakpoint($breakpoint-xs-max, "max") {
        to-rem(font-size, 10px);

        bottom: 24px;

        .DynamicPriceBubble--rollback & {
          to-rem(font-size, 9px);
        }
      }
    }

    .DynamicPriceBubble-text--small {
      $generate-scaled-properties(font-size, 14px);
    }

    .DynamicPriceBubble-text--was {
      $generate-scaled-properties(bottom, 16px);
    }

    .DynamicPriceBubble-text--manual {
      width: 78%;
      left: 11%;
    }
  }
}

.PovStory {
  $pov-base();
  $pov-container($tempo-pov-height);
  $pov-image($tempo-pov-height, $tempo-pov-width);
  $pov-button($pov-safe-zone-offset, $pov-theme-button-width);
  $pov-dynamic-price($dynamic-price);
}
