{
  "library": "@walmart/wmreact-base",
  "description": "Core non-interactive Hydra UI components",
  "title": "Base",
  "components": [
    {
      "displayName": "Body",
      "methods": [
        {
          "name": "_renderHeader",
          "docblock": null,
          "modifiers": [],
          "params": [],
          "returns": {
            "type": {
              "name": "ReactElement"
            }
          }
        },
        {
          "name": "_renderFooter",
          "docblock": null,
          "modifiers": [],
          "params": [],
          "returns": {
            "type": {
              "name": "ReactElement"
            }
          }
        }
      ],
      "props": {
        "logoImage": {
          "type": {
            "name": "string"
          },
          "required": false,
          "defaultValue": {
            "value": "\"//i5.walmartimages.com/dfw/63fd9f59-a546/k2-_47005cc8-29da-4fa9-ac2c-45e102a55bf5.v1.png\"",
            "computed": false
          },
          "description": "The logo image to use"
        },
        "title": {
          "type": {
            "name": "string"
          },
          "required": false,
          "defaultValue": {
            "value": "\"\"",
            "computed": false
          },
          "description": "The page title"
        },
        "navTarget": {
          "type": {
            "name": "string"
          },
          "required": false,
          "defaultValue": {
            "value": "\"\"",
            "computed": false
          },
          "description": "The navigation target"
        },
        "navText": {
          "type": {
            "name": "string"
          },
          "required": false,
          "defaultValue": {
            "value": "\"\"",
            "computed": false
          },
          "description": "The navigation text"
        },
        "navShort": {
          "type": {
            "name": "string"
          },
          "required": false,
          "defaultValue": {
            "value": "\"\"",
            "computed": false
          },
          "description": "The short name for the nav"
        },
        "navIcon": {
          "type": {
            "name": "string"
          },
          "required": false,
          "defaultValue": {
            "value": "\"\"",
            "computed": false
          },
          "description": "The navigation icon"
        },
        "footerLeft": {
          "type": {
            "name": "node"
          },
          "required": false,
          "defaultValue": {
            "value": "null",
            "computed": false
          },
          "description": "Extra content for the left of the footer"
        },
        "footerRight": {
          "type": {
            "name": "node"
          },
          "required": false,
          "defaultValue": {
            "value": "<a className=\"js-footer-feedback-opinion-lab\"\n  href=\"https://secure.opinionlab.com/ccc01/comment_card_d.asp\">\n  Leave feedback\n</a>",
            "computed": false
          },
          "description": "Extra content for the right of the footer"
        },
        "showHeader": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "defaultValue": {
            "value": "true",
            "computed": false
          },
          "description": "True if the header should be shown"
        },
        "showFooter": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "defaultValue": {
            "value": "true",
            "computed": false
          },
          "description": "True if the footer should be shown"
        },
        "headerHref": {
          "type": {
            "name": "string"
          },
          "required": false,
          "defaultValue": {
            "value": "\"/\"",
            "computed": false
          },
          "description": "The link for the title on the header"
        }
      },
      "fileName": "./src/components/body.jsx",
      "description": "Body container component.",
      "examples": "```jsx\n<Body>\n  Foo\n</Body>\n```",
      "component": "Body",
      "property": null,
      "import": "{Body}",
      "playground": [
        {
          "title": "Body",
          "flags": {},
          "code": "<Body title=\"Test Title\">\n  <p>Body Copy!</p>\n</Body>\n"
        }
      ],
      "hasProps": true
    },
    {
      "displayName": "Copy",
      "methods": [],
      "props": {
        "hidden": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": ""
        }
      },
      "fileName": "./src/components/copy.jsx",
      "description": "Makes copy",
      "examples": "```jsx\n<Copy>\n  Foo\n</Copy>\n```",
      "return": "React element",
      "param": "Properties",
      "component": "Copy",
      "import": "{Copy}",
      "playground": [
        {
          "title": "Copy",
          "flags": {},
          "code": "<Copy>Base Copy</Copy>\n"
        }
      ],
      "hasProps": true
    },
    {
      "displayName": "Copy.Mini",
      "methods": [],
      "props": {
        "hidden": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": ""
        }
      },
      "fileName": "./src/components/copy-mini.jsx",
      "description": "Makes mini copy.",
      "examples": "```jsx\n<Copy.Mini>\n  Foo\n</Copy.Mini>\n```",
      "return": "React element",
      "param": "Properties",
      "component": "Copy.Mini",
      "import": "{Copy}",
      "references": "Copy",
      "playground": [
        {
          "title": "",
          "flags": {},
          "code": "<Copy.Mini>\n  Foo\n</Copy.Mini>\n"
        }
      ],
      "hasProps": true
    },
    {
      "displayName": "Copy.OpenLeading",
      "methods": [],
      "props": {
        "hidden": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": ""
        }
      },
      "fileName": "./src/components/copy-openleading.jsx",
      "description": "Makes open-leading copy",
      "examples": "```jsx\n<Copy.OpenLeading>\n  Foo\n</Copy.OpenLeading>\n```",
      "return": "React element",
      "param": "Properties",
      "component": "Copy.OpenLeading",
      "import": "{Copy}",
      "references": "Copy",
      "playground": [
        {
          "title": "",
          "flags": {},
          "code": "<Copy.OpenLeading>\n  Foo\n</Copy.OpenLeading>\n"
        }
      ],
      "hasProps": true
    },
    {
      "displayName": "Copy.Small",
      "methods": [],
      "props": {
        "hidden": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": ""
        }
      },
      "fileName": "./src/components/copy-small.jsx",
      "description": "Makes samll copy",
      "examples": "```jsx\n<Copy.Small>\n  Foo\n</Copy.Small>\n```",
      "return": "React element",
      "param": "Properties",
      "component": "Copy.Small",
      "import": "{Copy}",
      "references": "Copy",
      "playground": [
        {
          "title": "",
          "flags": {},
          "code": "<Copy.Small>\n  Foo\n</Copy.Small>\n"
        }
      ],
      "hasProps": true
    },
    {
      "displayName": "Descriptions",
      "methods": [],
      "props": {
        "emphasize": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "description": "True if it should apply `dl-emphasize`"
        },
        "horizontal": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "description": "True if it should apply `dl-horizontal`"
        },
        "copySmall": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "description": "True if it should apply `copy-small`"
        },
        "copyMini": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "description": "True if it should apply `copy-mini`"
        },
        "hidden": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": ""
        }
      },
      "fileName": "./src/components/descriptions.jsx",
      "description": "Descriptions components family",
      "examples": "```jsx\n<Descriptions>\n  <Descriptions.Term>Term</Descriptions.Term>\n  <Descriptions.Description>Description</Descriptions.Description>\n</Descriptions>\n```",
      "component": "Descriptions",
      "import": "{Descriptions}",
      "playground": [
        {
          "title": "Descriptions",
          "flags": {},
          "code": "<Descriptions>\n  <Descriptions.Term>Term</Descriptions.Term>\n  <Descriptions.Description>Description</Descriptions.Description>\n</Descriptions>\n"
        }
      ],
      "hasProps": true
    },
    {
      "displayName": "Descriptions.Description",
      "methods": [],
      "props": {
        "hidden": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": ""
        }
      },
      "fileName": "./src/components/description-description.jsx",
      "description": "Description within a descriptions block",
      "component": "Descriptions.Description",
      "import": "{Descriptions}",
      "references": "Descriptions",
      "return": "React element",
      "param": "Properties",
      "hasProps": true
    },
    {
      "displayName": "Descriptions.Term",
      "methods": [],
      "props": {
        "hidden": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": ""
        }
      },
      "fileName": "./src/components/description-term.jsx",
      "description": "Description term",
      "component": "Descriptions.Term",
      "import": "{Descriptions}",
      "references": "Descriptions",
      "return": "React element",
      "param": "Properties",
      "hasProps": true
    },
    {
      "methods": [],
      "props": {
        "error": {
          "type": {
            "name": "string"
          },
          "required": true,
          "description": "The error string"
        },
        "hidden": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": ""
        }
      },
      "fileName": "./src/components/icon-validation-marker.jsx",
      "description": "Validation marker component",
      "examples": "```jsx\n<Icon.ValidationMarker />\n```",
      "return": "React element",
      "param": [
        "Properties",
        "Error"
      ],
      "component": "Icon.ValidationMarker",
      "import": "{Icon}",
      "playground": [
        {
          "title": "",
          "flags": {},
          "code": "<Icon.ValidationMarker />\n"
        }
      ],
      "hasProps": true
    },
    {
      "methods": [],
      "props": {
        "lazy": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "description": ""
        },
        "size": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": ""
        },
        "height": {
          "type": {
            "name": "custom",
            "raw": "validateDimension"
          },
          "required": false,
          "description": ""
        },
        "width": {
          "type": {
            "name": "custom",
            "raw": "validateDimension"
          },
          "required": false,
          "description": ""
        },
        "onClick": {
          "type": {
            "name": "func"
          },
          "required": false,
          "defaultValue": {
            "value": "() => {}",
            "computed": false
          },
          "description": ""
        },
        "src": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": ""
        },
        "ondemand": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "description": ""
        },
        "hidden": {
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        }
      },
      "fileName": "./src/components/image.jsx",
      "description": "Image component that conforms to our standard sizings.",
      "examples": "```jsx\n<Image src=\"foo.jpg\" size={50} />\n```",
      "return": "React element",
      "param": [
        "Properties",
        "Context"
      ],
      "component": "Image",
      "import": "{Image}",
      "playground": [
        {
          "title": "",
          "flags": {},
          "code": "<div>\n  <Image src=\"http://placehold.it/1000x1000\" size={30}/>\n  <Image src=\"http://placehold.it/1000x1000\" size={45}/>\n  <Image src=\"http://placehold.it/1000x1000\" size={50}/>\n  <Image src=\"http://placehold.it/1000x1000\" size={60}/>\n  <Image src=\"http://placehold.it/1000x1000\" size={100}/>\n  <Image src=\"http://placehold.it/1000x1000\" size={125}/>\n  <Image src=\"http://placehold.it/1000x1000\" size={150}/>\n  <Image src=\"http://placehold.it/1000x1000\" size={180}/>\n</div>\n"
        }
      ],
      "hasProps": true
    },
    {
      "methods": [],
      "props": {
        "onError": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": ""
        }
      },
      "fileName": "./src/components/image-loader.jsx",
      "description": "Image loader that manages errors and can display a loading\nimage.",
      "examples": "```jsx\n<ImageLoader src=\"foo.jpg\" size={50} />\n```",
      "component": "ImageLoader",
      "import": "{ImageLoader}",
      "playground": [
        {
          "title": "",
          "flags": {},
          "code": "<div>\n  <ImageLoader src=\"http://placehold.it/1000x1000\" />\n</div>\n"
        }
      ],
      "hasProps": true
    },
    {
      "methods": [],
      "props": {
        "arrow": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "description": "True if you want to apply `arrow-link`"
        },
        "more": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "description": "True if you want to apply `more-link`"
        },
        "dropdown": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "description": "True if you want to apply `dropdown-link`"
        },
        "onClick": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Handles the onClick event."
        },
        "active": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "description": "True if you want to apply `active`"
        },
        "hidden": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": ""
        }
      },
      "fileName": "./src/components/link.jsx",
      "description": "The base link component.",
      "examples": "```jsx\n<div>\n  <Link href=\"#\">Base Link</Link><br/>\n  <Link href=\"#\" arrow={true}>Arrow Link</Link><br/>\n  <Link href=\"#\" active={true}>Active Link</Link><br/>\n  <Link href=\"#\" dropdown={true}>Dropdown Link</Link>\n</div>\n```",
      "return": "React element",
      "param": [
        "Properties",
        "Context"
      ],
      "component": "Link",
      "import": "{Link}",
      "playground": [
        {
          "title": "Link",
          "flags": {},
          "code": "<div>\n  <Link href=\"#\">Base Link</Link><br/>\n  <Link href=\"#\" arrow={true}>Arrow Link</Link><br/>\n  <Link href=\"#\" active={true}>Active Link</Link><br/>\n  <Link href=\"#\" dropdown={true}>Dropdown Link</Link>\n</div>\n"
        }
      ],
      "hasProps": true
    },
    {
      "methods": [],
      "props": {
        "active": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "True if it should apply `active`"
        },
        "onClick": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Handles the onClick event."
        },
        "hidden": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": ""
        }
      },
      "fileName": "./src/components/link-arrow.jsx",
      "description": "Link with arrow.",
      "examples": "```jsx\n<Link.Arrow>\n  Foo\n</Link.Arrow>\n```",
      "return": "React element",
      "param": [
        "Properties",
        "Context"
      ],
      "component": "Link.Arrow",
      "import": "{Link}",
      "playground": [
        {
          "title": "",
          "flags": {},
          "code": "<Link.Arrow>\n  Foo\n</Link.Arrow>\n"
        }
      ],
      "hasProps": true
    },
    {
      "methods": [],
      "props": {
        "onClick": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Handles the onClick event."
        },
        "hidden": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": ""
        }
      },
      "fileName": "./src/components/link-dropdown.jsx",
      "description": "Dropdown link.",
      "examples": "```jsx\n<Link.Dropdown>\n  Foo\n</Link.Dropdown>\n```",
      "return": "React element",
      "param": [
        "Properties",
        "Context"
      ],
      "component": "Link.Dropdown",
      "import": "{Link}",
      "playground": [
        {
          "title": "",
          "flags": {},
          "code": "<Link.Dropdown>\n  Foo\n</Link.Dropdown>\n"
        }
      ],
      "hasProps": true
    },
    {
      "methods": [],
      "props": {
        "onClick": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Handles the onClick event."
        },
        "hidden": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": ""
        }
      },
      "fileName": "./src/components/link-more.jsx",
      "description": "Link for more.",
      "examples": "```jsx\n<Link.More>\n  Foo\n</Link.More>\n```",
      "return": "React element",
      "param": [
        "Properties",
        "Context"
      ],
      "component": "Link.More",
      "import": "{Link}",
      "playground": [
        {
          "title": "",
          "flags": {},
          "code": "<Link.More>\n  Foo\n</Link.More>\n"
        }
      ],
      "hasProps": true
    }
  ]
}