{
  "library": "@walmart/wmreact-layout",
  "description": "A set of layout components for hydra based UI",
  "title": "Layout",
  "components": [
    {
      "props": {
        "spaced": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "description": "Applies `arrange-spaced` class"
        },
        "middle": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "description": "Applies `arrange-middle` class"
        },
        "bottom": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "description": "Applies `arrange-bottom` class"
        },
        "equalSpacing": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "description": "Applies `arrange-equal-spacing` class"
        },
        "equal": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "description": "Applies `arrange-equal` class"
        }
      },
      "fileName": "./src/components/arrange.jsx",
      "description": "Container component for arrange layouts.",
      "examples": "```jsx\n<Arrange>\n  <Arrange.Fill>Foo</Arrange.Fill>\n  <Arrange.Fit>Foo</Arrange.Fit>\n</Arrange>\n```",
      "component": "Arrange",
      "import": "{Arrange}",
      "playground": [
        {
          "title": "",
          "flags": {},
          "code": "<Arrange>\n  <Arrange.Fill>Foo</Arrange.Fill>\n  <Arrange.Fit>Foo</Arrange.Fit>\n</Arrange>\n"
        }
      ],
      "hasProps": true
    },
    {
      "props": {
        "spaced": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "defaultValue": {
            "value": "true",
            "computed": false
          },
          "description": "Applies `arrange-spaced` to the container."
        },
        "middle": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "description": "Applies `arrange-middle` to the container."
        },
        "bottom": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "description": "Applies `arrange-bottom` to the container."
        },
        "equalSpacing": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "description": "Applies `arrange-equal-spacing` to the container."
        },
        "equal": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "description": "Applies `arrange-equal` to the container."
        }
      },
      "fileName": "./src/components/arrange-fit-all.jsx",
      "description": "Convencience component to apply an arrange-fit layout to all of the children.",
      "examples": "```jsx\n<Arrange.FitAll>\n  <div>A</div>\n  <div>B</div>\n  <div>C</div>\n</Arrange.FitAll>\n```",
      "component": "Arrange.FitAll",
      "import": "{Arrange}",
      "flags": "noVisibleRender",
      "playground": [
        {
          "title": "",
          "flags": {},
          "code": "<Arrange.FitAll>\n  <div style={{background: '#ccc', padding: '1rem'}}>A</div>\n  <div style={{background: '#aaa', padding: '1rem'}}>B</div>\n  <div style={{background: '#ccc', padding: '1rem'}}>C</div>\n  <div style={{background: '#ccc', padding: '1rem'}}>D</div>\n  <div style={{background: '#aaa', padding: '1rem'}}>E</div>\n  <div style={{background: '#ccc', padding: '1rem'}}>F</div>\n</Arrange.FitAll>\n"
        }
      ],
      "hasProps": true
    },
    {
      "props": {
        "formatBelow": {
          "type": {
            "name": "func"
          },
          "required": false,
          "defaultValue": {
            "value": "(breakpoint) => breakpoint.hideBelow",
            "computed": false
          },
          "description": "Formats hidden below classnames"
        },
        "formatAbove": {
          "type": {
            "name": "func"
          },
          "required": false,
          "defaultValue": {
            "value": "(breakpoint) => breakpoint.hideAbove",
            "computed": false
          },
          "description": "Formats hidden above classnames"
        },
        "formatAt": {
          "type": {
            "name": "func"
          },
          "required": false,
          "defaultValue": {
            "value": "(breakpoint) => breakpoint.hideAt",
            "computed": false
          },
          "description": "Formats hidden at classnames"
        },
        "formatAll": {
          "type": {
            "name": "func"
          },
          "required": false,
          "defaultValue": {
            "value": "() => \"hide-content\"",
            "computed": false
          },
          "description": "Formats hidden at all breakpoints classname"
        },
        "breakpoints": {
          "type": {
            "name": "array"
          },
          "required": false,
          "defaultValue": {
            "value": "[\n  {\n    name: \"x-small\",\n    hideBelow: \"hide-content-max-xs\",\n    hideAbove: \"hide-content-xs\",\n    hideAt: \"hide-content-max-xs\"\n  },\n  {\n    name: \"small\",\n    hideBelow: \"hide-content-max-s\",\n    hideAbove: \"hide-content-s\",\n    hideAt: \"hide-content-xs hide-content-max-m\"\n  },\n  {\n    name: \"medium\",\n    hideBelow: \"hide-content-max-m\",\n    hideAbove: \"hide-content-m\",\n    hideAt: \"hide-content-max-s hide-content-m\"\n  },\n  {\n    name: \"large\",\n    hideBelow: \"hide-content-max-l\",\n    hideAbove: \"hide-content-l\",\n    hideAt: \"hide-content-max-m hide-content-xl\"\n  },\n  {\n    name: \"x-large\",\n    hideBelow: \"hide-content-max-xl\",\n    hideAbove: \"hide-content-xl\",\n    hideAt: \"hide-content-xl\"\n  }\n]",
            "computed": false
          },
          "description": "The available breakpoints from the CSS framework"
        }
      },
      "fileName": "./src/components/css-media-selector.jsx",
      "description": "Media selector is a component that wraps a group of children.\nThose children can have a `visibleWidths` prop that defines\nwhen they should be visible. For example, if the child has\n`visibleWidths` set to `['small','medium']` then it will only\nbe visible in small and medium screen widths.\n\nHere is a simple example, where the first child is shown when the\nmedia size is `medium` or above, and the second child is shown only\nwhen the media size is below `medium`.\n\n```jsx\n<CSSMediaSelector>\n  <div visibleAtOrAbove=\"medium\">Shown in medium</div>\n  <div visibleBelow=\"medium\">Shown below medium</div>\n</CSSMediaSelector>\n```",
      "component": "CSSMediaSelector",
      "synonym": [
        "responsive"
      ],
      "import": "{CSSMediaSelector}",
      "playground": [
        {
          "title": "CSSMediaSelector",
          "flags": {},
          "code": "<CSSMediaSelector mode=\"hide\">\n  <div visibleWidths={['small']}>Currently in small</div>\n  <div visibleWidths={['medium']}>Currently in medium</div>\n  <div visibleWidths={['large']}>Currently in large</div>\n  <div visibleWidths={['x-large']}>Currently in x-large</div>\n  <div visibleWidths={['xx-large']}>Currently in xx-large</div>\n  <hr/>\n\n  <div visibleAbove='small'>visibleAbove: Visible in Medium and above</div>\n  <div visibleAbove='medium'>visibleAbove: Visible in Large and above</div>\n  <hr/>\n\n  <div visibleAtOrAbove='medium'>visibleAtOrAbove: Visible in Medium and above</div>\n  <div visibleAtOrAbove='large'>visibleAtOrAbove: Visible in Large and above</div>\n  <hr/>\n\n  <div visibleBelow='medium'>visibleBelow: Visible in Small</div>\n  <div visibleBelow='large'>visibleBelow: Visible in Small and Medium</div>\n  <hr/>\n\n  <div visibleAtOrBelow='small'>visibleAtOrBelow: Visible in Small</div>\n  <div visibleAtOrBelow='medium'>visibleAtOrBelow: Visible in Small and Medium</div>\n  <hr/>\n\n  <div hiddenAbove='small'>hiddenAbove: Visible in Small</div>\n  <div hiddenAbove='medium'>hiddenAbove: Visible in Small and Medium</div>\n  <hr/>\n\n  <div hiddenAtOrAbove='medium'>hiddenAtOrAbove: Visible in Small</div>\n  <div hiddenAtOrAbove='large'>hiddenAtOrAbove: Visible in Small and Medium</div>\n  <hr/>\n\n  <div hiddenBelow='medium'>hiddenBelow: Visible above Small</div>\n  <div hiddenBelow='large'>hiddenBelow: Visible above Medium</div>\n  <hr/>\n\n  <div hiddenAtOrBelow='medium'>hiddenAtOrAbove: Visible in Large</div>\n  <div hiddenAtOrBelow='large'>hiddenAtOrAbove: Visible above Large</div>\n</CSSMediaSelector>\n"
        }
      ],
      "hasProps": true
    },
    {
      "displayName": "Collapsable",
      "props": {
        "containerClassName": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "CSS class name to apply to the component container"
        },
        "isOpen": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "defaultValue": {
            "value": "true",
            "computed": false
          },
          "description": "True if the collapsable area is open"
        },
        "transitionDuration": {
          "type": {
            "name": "number"
          },
          "required": false,
          "defaultValue": {
            "value": "400",
            "computed": false
          },
          "description": "The duration of the collasping transition (in milliseconds)"
        },
        "transitionTimingFunction": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "The easing function for the transition"
        },
        "transitionComplete": {
          "type": {
            "name": "func"
          },
          "required": false,
          "defaultValue": {
            "value": "() => {}",
            "computed": false
          },
          "description": "Event callback for when the transition is complete"
        },
        "isVertical": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "defaultValue": {
            "value": "true",
            "computed": false
          },
          "description": "True if the layout is vertical"
        },
        "baseHeight": {
          "type": {
            "name": "number"
          },
          "required": false,
          "defaultValue": {
            "value": "0",
            "computed": false
          },
          "description": "The collapsed height, in pixels"
        },
        "baseWidth": {
          "type": {
            "name": "number"
          },
          "required": false,
          "defaultValue": {
            "value": "0",
            "computed": false
          },
          "description": "The collapsed width, in pixels"
        },
        "overflow": {
          "type": {
            "name": "string"
          },
          "required": false,
          "defaultValue": {
            "value": "\"hidden\"",
            "computed": false
          },
          "description": "What CSS overflow style to apply when collapsed"
        }
      },
      "fileName": "./src/components/collapsable.jsx",
      "description": "Provides a collapsing layout.",
      "examples": "```jsx\n<Collapsable>\n   Foo\n</Collapsable>\n```",
      "import": "{Collapsable}",
      "flags": "noVisibleRender",
      "component": "Collapsable",
      "playground": [
        {
          "title": "Collapsable",
          "flags": {
            "noRenderFalse": true
          },
          "code": "var CollapsableExample = React.createClass({\n  getInitialState() {\n    return {\n      open: false\n    }\n  },\n  expandToggle() {\n    this.setState({\n      open: this.state.open ? false : true\n    })\n  },\n  render() {\n  return (\n      <div>\n        <Collapsable isOpen={this.state.open}>\n          <div>\n            <p style={{margin: 0}}>Hi!</p>\n          </div>\n        </Collapsable>\n        <a href=\"javascript:void(0)\" onClick={this.expandToggle}>\n          {this.state.open ? 'Collapse' : 'Expand'}\n        </a>\n      </div>\n    )\n  }\n});\n\nReact.render(<CollapsableExample/>, mountNode);\n"
        }
      ],
      "hasProps": true
    },
    {
      "props": {
        "fixedContent": {
          "type": {
            "name": "node"
          },
          "required": false,
          "defaultValue": {
            "value": "null",
            "computed": false
          },
          "description": "The content that should be used when fixed"
        },
        "fixedAtBottom": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "description": "True if it should be fixed at the bottom"
        },
        "cssMode": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "description": "True if Fixie should just add CSS classes instead of creating DOM elements"
        }
      },
      "fileName": "./src/components/fixie.jsx",
      "description": "A fixed bar component.",
      "examples": "```jsx\n<Fixie>\n   <p>Fixed when you scroll past</p>\n</Fixie>\n```\n\nFixed at the bottom:\n\n```jsx\n<Fixie fixedAtBottom={true}>\n  <p>Fixed when you scroll past the bottom</p>\n</Fixie>\n```\n\nSupporting replaced content when fixed\n\n```jsx\n<Fixie fixedContent={<div>Different content when fixed</div>}>\n  <p>Content when not fixed</p>\n</Fixie>\n```\n\nCSS mode to add a class to existing DOM rather than creating new elements. Doesn't support different\nfixed content.\n\n```jsx\n<Fixie cssMode={true}>\n  <p>Content fixed with CSS mode</p>\n</Fixie>\n```",
      "component": "Fixie",
      "import": "{Fixie}",
      "playground": [
        {
          "title": "Fixie",
          "flags": {},
          "code": "<div>\n  <Fixie>\n    <p>Fixed when you scroll past</p>\n  </Fixie>\n\n  <Fixie fixedAtBottom={true}>\n    <p>Fixed when you scroll past the bottom</p>\n  </Fixie>\n\n  <Fixie fixedContent={<div>Different content when fixed</div>}>\n    <p>Content when not fixed</p>\n  </Fixie>\n\n  <Fixie cssMode={true}>\n    <p style={{ margin: 0, textAlign: \"right\" }}>Content fixed with CSS mode</p>\n  </Fixie>\n</div>\n"
        }
      ],
      "hasProps": true
    },
    {
      "displayName": "Grid",
      "props": {},
      "fileName": "./src/components/grid.jsx",
      "description": "Component that adds the `grid` CSS class to container",
      "deprecated": null,
      "component": "Grid",
      "hasProps": false
    },
    {
      "displayName": "Grid.ApplyClasses",
      "props": {
        "classes": {
          "type": {
            "name": "string"
          },
          "required": true,
          "description": "The classes to add to each of the children"
        }
      },
      "fileName": "./src/components/grid-apply-classes.jsx",
      "description": "A responsive helper class that applies the `classes` prop to all of the children.\n\nAn example that applies 'foo bar' to the classNames of all of the children.",
      "examples": "```jsx\n<Grid.ApplyClasses classes=\"foo bar\">\n  <div>A</div><div>B</div><div>C</div>\n</Grid.ApplyClasses>\n```",
      "import": "{Grid}",
      "component": "Grid.ApplyClasses",
      "hasProps": true
    },
    {
      "displayName": "Grid.GroupChildren",
      "props": {
        "classes": {
          "type": {
            "name": "string"
          },
          "required": true,
          "description": "The classes to apply to the row div"
        },
        "columns": {
          "type": {
            "name": "number"
          },
          "required": true,
          "description": "The number of columns in a row"
        }
      },
      "fileName": "./src/components/grid-group-children.jsx",
      "description": "Groups children into rows with a set number of columns.\n\nThis example organizes the children into rows of 2 columns where each row\nis given the `className` of `my-column`.",
      "examples": "```jsx\n<Grid.GroupChildren classes=\"my-column\" columns={2}>\n  <div>A</div><div>B</div><div>C</div>\n</Grid.GroupChildren>\n```",
      "import": "{Grid}",
      "component": "Grid.GroupChildren",
      "hasProps": true
    },
    {
      "displayName": "JSMediaSelector",
      "props": {
        "onChange": {
          "type": {
            "name": "func"
          },
          "required": false,
          "defaultValue": {
            "value": "() => {}",
            "computed": false
          },
          "description": "An event fired when the media width changes"
        },
        "mode": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "\"hide\"",
                "computed": false
              },
              {
                "value": "\"delete\"",
                "computed": false
              }
            ]
          },
          "required": false,
          "defaultValue": {
            "value": "\"delete\"",
            "computed": false
          },
          "description": "Selects between either `hide`ing the childrens on not displaying them (i.e. `delete`)"
        },
        "default": {
          "type": {
            "name": "string"
          },
          "required": false,
          "defaultValue": {
            "value": "\"small\"",
            "computed": false
          },
          "description": "Sets the default media width for server rendering"
        }
      },
      "fileName": "./src/components/js-media-selector.jsx",
      "description": "Media selector is a component that wraps a group of children.\nThose children can have a `visibleWidths` prop that defines\nwhen they should be visible. For example, if the child has\n`visibleWidths` set to `['small','medium']` then it will only\nbe visible in small and medium screen widths.\n\nHere is a simple example, where the first child is shown when the\nmedia size is `medium` or above, and the second child is shown only\nwhen the media size is below `medium`.\n\n```jsx\n<JSMediaSelector>\n  <div visibleAtOrAbove=\"medium\">Shown in medium</div>\n  <div visibleBelow=\"medium\">Shown below medium</div>\n</JSMediaSelector>\n```",
      "component": "JSMediaSelector",
      "synonym": [
        "responsive"
      ],
      "import": "{JSMediaSelector}",
      "playground": [
        {
          "title": "JSMediaSelector",
          "flags": {},
          "code": "<JSMediaSelector mode=\"hide\">\n  <div visibleWidths={['small']}>Currently in small</div>\n  <div visibleWidths={['medium']}>Currently in medium</div>\n  <div visibleWidths={['large']}>Currently in large</div>\n  <div visibleWidths={['x-large']}>Currently in x-large</div>\n  <div visibleWidths={['xx-large']}>Currently in xx-large</div>\n  <hr/>\n\n  <div visibleAbove='small'>visibleAbove: Visible in Medium and above</div>\n  <div visibleAbove='medium'>visibleAbove: Visible in Large and above</div>\n  <hr/>\n\n  <div visibleAtOrAbove='medium'>visibleAtOrAbove: Visible in Medium and above</div>\n  <div visibleAtOrAbove='large'>visibleAtOrAbove: Visible in Large and above</div>\n  <hr/>\n\n  <div visibleBelow='medium'>visibleBelow: Visible in Small</div>\n  <div visibleBelow='large'>visibleBelow: Visible in Small and Medium</div>\n  <hr/>\n\n  <div visibleAtOrBelow='small'>visibleAtOrBelow: Visible in Small</div>\n  <div visibleAtOrBelow='medium'>visibleAtOrBelow: Visible in Small and Medium</div>\n  <hr/>\n\n  <div hiddenAbove='small'>hiddenAbove: Visible in Small</div>\n  <div hiddenAbove='medium'>hiddenAbove: Visible in Small and Medium</div>\n  <hr/>\n\n  <div hiddenAtOrAbove='medium'>hiddenAtOrAbove: Visible in Small</div>\n  <div hiddenAtOrAbove='large'>hiddenAtOrAbove: Visible in Small and Medium</div>\n  <hr/>\n\n  <div hiddenBelow='medium'>hiddenBelow: Visible above Small</div>\n  <div hiddenBelow='large'>hiddenBelow: Visible above Medium</div>\n  <hr/>\n\n  <div hiddenAtOrBelow='medium'>hiddenAtOrAbove: Visible in Large</div>\n  <div hiddenAtOrBelow='large'>hiddenAtOrAbove: Visible above Large</div>\n</JSMediaSelector>\n"
        }
      ],
      "hasProps": true
    },
    {
      "displayName": "Layout",
      "props": {
        "x-small": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": "The number of columns for the x-small media size."
        },
        "small": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": "The number of columns for the small media size."
        },
        "medium": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": "The number of columns for the medium media size."
        },
        "large": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": "The number of columns for the large media size."
        },
        "x-large": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": "The number of columns for the x-large media size."
        },
        "x-small-sizes": {
          "type": {
            "name": "array"
          },
          "required": false,
          "description": "An array of column sizes (based on a 12-grid layout) for the x-small media size."
        },
        "small-sizes": {
          "type": {
            "name": "array"
          },
          "required": false,
          "description": "An array of column sizes (based on a 12-grid layout) for the small media size."
        },
        "medium-sizes": {
          "type": {
            "name": "array"
          },
          "required": false,
          "description": "An array of column sizes (based on a 12-grid layout) for the medium media size."
        },
        "large-sizes": {
          "type": {
            "name": "array"
          },
          "required": false,
          "description": "An array of column sizes (based on a 12-grid layout) for the large media size."
        },
        "x-large-sizes": {
          "type": {
            "name": "array"
          },
          "required": false,
          "description": "An array of column sizes (based on a 12-grid layout) for the x-large media size."
        },
        "padded": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "True if the grid should be padded."
        },
        "align": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "\"left\"",
                "computed": false
              },
              {
                "value": "\"center\"",
                "computed": false
              },
              {
                "value": "\"right\"",
                "computed": false
              }
            ]
          },
          "required": false,
          "defaultValue": {
            "value": "\"left\"",
            "computed": false
          },
          "description": "Horizontal alignment for the container."
        },
        "vertical": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "\"top\"",
                "computed": false
              },
              {
                "value": "\"middle\"",
                "computed": false
              },
              {
                "value": "\"bottom\"",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "Vertical alignment for the container."
        }
      },
      "fileName": "./src/components/layout.jsx",
      "description": "A layout manager that makes it easy to build responsive layouts with different\nnumbers of columns at different breakpoints.",
      "examples": "This layout is one column in `x-small` media size, and three columns\nin `medium` and above.\n\n```jsx\n<Layout x-small={1} medium={3}>\n  <div>A</div><div>B</div><div>C</div>\n</Layout>\n```\n\nAnd this layout is one column in `x-small` media size, and three columns\nin `medium` where the columns are 2, 8 and 2 wide (using the 12 grid layout\nsizing).\n\n```jsx\n<Layout x-small={1} medium-sizes={[2,8,2]}>\n  <div>A</div><div>B</div><div>C</div>\n</Layout>\n```",
      "import": "{Layout}",
      "component": "Layout",
      "flags": "noVisibleRender",
      "synonym": [
        "responsive"
      ],
      "playground": [
        {
          "title": "Layout",
          "flags": {},
          "code": "<Layout large={4} medium={3} small={2} x-small={1} padded={true}>\n  <div style={{background:'#ccc',padding:'1rem'}}>A</div>\n  <div style={{background:'#aaa',padding:'1rem'}}>B</div>\n  <div style={{background:'#ccc',padding:'1rem'}}>C</div>\n</Layout>\n"
        }
      ],
      "hasProps": true
    },
    {
      "displayName": "MediaSelector",
      "props": {
        "onChange": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "An event fired when the media width changes"
        },
        "mode": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "\"css\"",
                "computed": false
              },
              {
                "value": "\"hide\"",
                "computed": false
              },
              {
                "value": "\"delete\"",
                "computed": false
              }
            ]
          },
          "required": false,
          "defaultValue": {
            "value": "\"delete\"",
            "computed": false
          },
          "description": "Selects between either `hide`ing the childrens on not displaying them (i.e. `delete`)"
        },
        "default": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "Sets the default media width for server rendering"
        }
      },
      "fileName": "./src/components/media-selector.jsx",
      "description": "Media selector is a component that wraps a group of children.\nThose children can have a `visibleWidths` prop that defines\nwhen they should be visible. For example, if the child has\n`visibleWidths` set to `['small','medium']` then it will only\nbe visible in small and medium screen widths.\n\nHere is a simple example, where the first child is shown when the\nmedia size is `medium` or above, and the second child is shown only\nwhen the media size is below `medium`.\n\n```jsx\n<MediaSelector>\n  <div visibleAtOrAbove=\"medium\">Shown in medium</div>\n  <div visibleBelow=\"medium\">Shown below medium</div>\n</MediaSelector>\n```",
      "component": "MediaSelector",
      "synonym": [
        "responsive"
      ],
      "import": "{MediaSelector}",
      "playground": [
        {
          "title": "MediaSelector",
          "flags": {},
          "code": "<MediaSelector mode=\"hide\">\n  <div visibleWidths={['small']}>Currently in small</div>\n  <div visibleWidths={['medium']}>Currently in medium</div>\n  <div visibleWidths={['large']}>Currently in large</div>\n  <div visibleWidths={['x-large']}>Currently in x-large</div>\n  <div visibleWidths={['xx-large']}>Currently in xx-large</div>\n  <hr/>\n\n  <div visibleAbove='small'>visibleAbove: Visible in Medium and above</div>\n  <div visibleAbove='medium'>visibleAbove: Visible in Large and above</div>\n  <hr/>\n\n  <div visibleAtOrAbove='medium'>visibleAtOrAbove: Visible in Medium and above</div>\n  <div visibleAtOrAbove='large'>visibleAtOrAbove: Visible in Large and above</div>\n  <hr/>\n\n  <div visibleBelow='medium'>visibleBelow: Visible in Small</div>\n  <div visibleBelow='large'>visibleBelow: Visible in Small and Medium</div>\n  <hr/>\n\n  <div visibleAtOrBelow='small'>visibleAtOrBelow: Visible in Small</div>\n  <div visibleAtOrBelow='medium'>visibleAtOrBelow: Visible in Small and Medium</div>\n  <hr/>\n\n  <div hiddenAbove='small'>hiddenAbove: Visible in Small</div>\n  <div hiddenAbove='medium'>hiddenAbove: Visible in Small and Medium</div>\n  <hr/>\n\n  <div hiddenAtOrAbove='medium'>hiddenAtOrAbove: Visible in Small</div>\n  <div hiddenAtOrAbove='large'>hiddenAtOrAbove: Visible in Small and Medium</div>\n  <hr/>\n\n  <div hiddenBelow='medium'>hiddenBelow: Visible above Small</div>\n  <div hiddenBelow='large'>hiddenBelow: Visible above Medium</div>\n  <hr/>\n\n  <div hiddenAtOrBelow='medium'>hiddenAtOrAbove: Visible in Large</div>\n  <div hiddenAtOrBelow='large'>hiddenAtOrAbove: Visible above Large</div>\n</MediaSelector>\n"
        }
      ],
      "hasProps": true
    },
    {
      "displayName": "Stack",
      "props": {},
      "fileName": "./src/components/stack.jsx",
      "description": "Container component for stack layouts.",
      "examples": "Here is a simple example of a stack layout where the first cell is fills and the\nsecond cell fits.\n\n```jsx\n<Stack>\n  <Stack.Fill>Foo</Stack.Fill>\n  <Stack.Fit>Foo</Stack.Fit>\n</Stack>\n```",
      "import": "{Stack}",
      "component": "Stack",
      "playground": [
        {
          "title": "",
          "flags": {},
          "code": "<Stack>\n  <Stack.Fill>Foo</Stack.Fill>\n  <Stack.Fit>Foo</Stack.Fit>\n</Stack>\n"
        }
      ],
      "hasProps": false
    },
    {
      "displayName": "Stack.Fill",
      "props": {},
      "fileName": "./src/components/stack-fill.jsx",
      "description": "Wraps an stack fill cell.",
      "import": "{Stack}",
      "component": "Stack.Fill",
      "references": "Stack",
      "playground": [
        {
          "title": "",
          "flags": {},
          "code": "<Stack>\n  <Stack.Fill>Foo</Stack.Fill>\n</Stack>\n"
        }
      ],
      "hasProps": false
    },
    {
      "displayName": "Stack.Fit",
      "props": {},
      "fileName": "./src/components/stack-fit.jsx",
      "description": "Wraps an stack fill cell.",
      "import": "{Stack}",
      "component": "Stack.Fit",
      "references": "Stack",
      "playground": [
        {
          "title": "",
          "flags": {},
          "code": "<Stack>\n  <Stack.Fit>Foo</Stack.Fit>\n</Stack>\n"
        }
      ],
      "hasProps": false
    }
  ]
}