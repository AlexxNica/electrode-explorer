{
  "library": "@walmart/wmreact-accordion",
  "description": "An accordion container for Electrode UIs",
  "title": "Accordion",
  "components": [
    {
      "displayName": "Accordion",
      "methods": [
        {
          "name": "_isAuto",
          "docblock": null,
          "modifiers": [],
          "params": [],
          "returns": {
            "type": {
              "name": "boolean"
            }
          }
        },
        {
          "name": "_onClick",
          "docblock": null,
          "modifiers": [],
          "params": [
            {
              "name": "index",
              "type": {
                "name": "number"
              }
            },
            {
              "name": "event",
              "type": {
                "name": "Object",
                "alias": "Object"
              }
            }
          ],
          "returns": {
            "type": {
              "name": "void"
            }
          }
        },
        {
          "name": "_renderChild",
          "docblock": null,
          "modifiers": [],
          "params": [
            {
              "name": "child",
              "type": {
                "name": "ReactElement",
                "alias": "ReactElement"
              }
            },
            {
              "name": "index",
              "type": {
                "name": "number"
              }
            }
          ],
          "returns": {
            "type": {
              "name": "ReactElement"
            }
          }
        }
      ],
      "props": {
        "mode": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "\"auto\"",
                "computed": false
              },
              {
                "value": "\"manual\"",
                "computed": false
              }
            ]
          },
          "required": false,
          "defaultValue": {
            "value": "\"auto\"",
            "computed": false
          },
          "description": "In `auto` mode the accordion tabs open and close themselves. In `manual` mode\n    you use the `completed` state on the accordion item to manage which item is open"
        },
        "automationId": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "The ID to use for automation"
        },
        "hidden": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": ""
        }
      },
      "fileName": "./src/components/accordion.jsx",
      "description": "An accordion component with expanding/collapsing titled\naccordion segments that works well in responsive.",
      "examples": "```jsx\n<Accordion>\n  <Accordion.Item title=\"Step 1\">\n    <h1>First Step Content</h1>\n  </Accordion.Item>\n  <Accordion.Item title=\"Step 2\">\n    <h1>Second Step Content</h1>\n  </Accordion.Item>\n  <Accordion.Item title=\"Step 3\">\n    <h1>Third Step Content</h1>\n  </Accordion.Item>\n</Accordion>\n```\n\nAnd one that shows more of the features:\n\n```jsx\n<Accordion>\n  <Accordion.Item title=\"Step 1\" titleCompleted=\"Step 1\">\n    <h1>First Step Content</h1>\n  </Accordion.Item>\n  <Accordion.Item title=\"Step 2\" titleCompleted=\"Step 2\"\n    titleExtra={\n      <Accordion.Summary>\n        <span>A summary item of step 2</span>\n        <span>And another one</span>\n      </Accordion.Summary>}>\n    <h1>Second Step Content</h1>\n  </Accordion.Item>\n  <Accordion.Item title=\"Step 3\" titleCompleted=\"Step 3\">\n    <h1>Third Step Content</h1>\n  </Accordion.Item>\n</Accordion>\n```",
      "import": "Accordion",
      "component": "Accordion",
      "uxUsage": "+ Use when you want the benefits of a normal sidebar menu, but do not have the space to list\n  all options.\n+ Use when there are more than 2 main sections on a website each with 2 or more subsections.\n+ Use when you have less than 10 main sections\n+ Use when you only have two levels to show in the main navigation.",
      "uxSpecifications": "+ Each headline / section has a panel, which upon clicking can be expanded either vertically or\n  horizontally into showing its subsections.\n+ The transition from showing no options of a headline to showing a headlineâ€™s list of options\n  can be done either with a page refresh or with a javascript DHTML animation.\n+ When one panel is clicked it is expanded, while other panels are collapsed.",
      "playground": [
        {
          "title": "Simple Accordion",
          "flags": {},
          "code": "<Accordion>\n  <Accordion.Item title=\"Step 1\">\n    <h1>First Step Content</h1>\n  </Accordion.Item>\n  <Accordion.Item title=\"Step 2\">\n    <h1>Second Step Content</h1>\n  </Accordion.Item>\n  <Accordion.Item title=\"Step 3\">\n    <h1>Third Step Content</h1>\n  </Accordion.Item>\n</Accordion>\n"
        },
        {
          "title": "Accordion",
          "flags": {},
          "code": "<Accordion>\n  <Accordion.Item title=\"Step 1\" titleCompleted=\"Step 1\">\n    <h1>First Step Content</h1>\n  </Accordion.Item>\n  <Accordion.Item title=\"Step 2\" titleCompleted=\"Step 2\"\n    titleExtra={\n      <Accordion.Summary>\n        <span>A summary item of step 2</span>\n        <span>And another one</span>\n      </Accordion.Summary>}>\n    <h1>Second Step Content</h1>\n  </Accordion.Item>\n  <Accordion.Item title=\"Step 3\" titleCompleted=\"Step 3\">\n    <h1>Third Step Content</h1>\n  </Accordion.Item>\n</Accordion>\n"
        }
      ],
      "hasProps": true
    },
    {
      "displayName": "Accordion.Item",
      "methods": [
        {
          "name": "_onClick",
          "docblock": null,
          "modifiers": [],
          "params": [
            {
              "name": "event",
              "type": {
                "name": "Object",
                "alias": "Object"
              }
            }
          ],
          "returns": {
            "type": {
              "name": "void"
            }
          }
        },
        {
          "name": "_renderHeader",
          "docblock": null,
          "modifiers": [],
          "params": [],
          "returns": {
            "type": {
              "name": "ReactElement"
            }
          }
        }
      ],
      "props": {
        "title": {
          "type": {
            "name": "string"
          },
          "required": true,
          "description": "The title"
        },
        "index": {
          "type": {
            "name": "number"
          },
          "required": false,
          "defaultValue": {
            "value": "null",
            "computed": false
          },
          "description": "The index if you want to set the number manually"
        },
        "active": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "defaultValue": {
            "value": "true",
            "computed": false
          },
          "description": "True if this is the active accordion item"
        },
        "open": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "description": "True if the item is open"
        },
        "titleButton": {
          "type": {
            "name": "node"
          },
          "required": false,
          "defaultValue": {
            "value": "null",
            "computed": false
          },
          "description": "An optional title button if you want to use a button instead of text"
        },
        "titleExtra": {
          "type": {
            "name": "node"
          },
          "required": false,
          "defaultValue": {
            "value": "null",
            "computed": false
          },
          "description": "Optional extra material in the title area if you want it."
        },
        "editButton": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The edit button if you want one"
        },
        "onClick": {
          "type": {
            "name": "func"
          },
          "required": true,
          "defaultValue": {
            "value": "() => {}",
            "computed": false
          },
          "description": "An event callback for a click on the title bar."
        },
        "completed": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "Set to true if this step has been completed."
        },
        "titleCompleted": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "Title for when the step is completed."
        },
        "automationId": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "An optional automation ID"
        },
        "hidden": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": ""
        }
      },
      "fileName": "./src/components/accordion-item.jsx",
      "description": "The container class for the accordion items.",
      "import": "Accordion",
      "component": "Accordion.Item",
      "references": "Accordion",
      "playground": [
        {
          "title": "",
          "flags": {},
          "code": "<Accordion.Item title=\"Step 1\">\n  <h1>First Step Content</h1>\n</Accordion.Item>\n"
        }
      ],
      "hasProps": true
    },
    {
      "displayName": "Accordion.ItemSummary",
      "methods": [
        {
          "name": "_renderSummaryItem",
          "docblock": null,
          "modifiers": [],
          "params": [
            {
              "name": "child",
              "type": {
                "name": "ReactElement",
                "alias": "ReactElement"
              }
            },
            {
              "name": "index",
              "type": {
                "name": "number"
              }
            }
          ],
          "returns": {
            "type": {
              "name": "ReactElement"
            }
          }
        }
      ],
      "props": {
        "inReview": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "description": "True if we should add the `in-review` class"
        }
      },
      "fileName": "./src/components/accordion-summary.jsx",
      "description": "A item summary container specifically for accordions.",
      "examples": "```jsx\n<Accordion>\n  <Accordion.Item title=\"Step 1\"\n    titleExtra={\n      <Accordion.Summary>\n        <span>A summary item of step 1</span>\n        <span>And another one</span>\n      </Accordion.Summary>}>\n    <h1>First Step Content</h1>\n  </Accordion.Item>\n</Accordion>\n```",
      "import": "Accordion",
      "component": "Accordion.Summary",
      "references": "Accordion",
      "playground": [
        {
          "title": "",
          "flags": {},
          "code": "<Accordion.Summary>\n  <span>A summary item of step 1</span>\n  <span>And another one</span>\n</Accordion.Summary>\n"
        }
      ],
      "hasProps": true
    }
  ]
}