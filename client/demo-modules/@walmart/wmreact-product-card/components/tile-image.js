"use strict";

exports.__esModule = true;

var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _possibleConstructorReturn2 = require("babel-runtime/helpers/possibleConstructorReturn");

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require("babel-runtime/helpers/inherits");

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _wmreactImageUtils = require("@walmart/wmreact-image-utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * This is the cdn version of default spacer image
 * taken from http://www.walmart.com/static/gen/js/config-map.js
 * Currently we dont have any way to hook into assets.json
 * which is generated by old build process.
 * This image won't be changed ever. But If there is any upgrade
 * its version will change so we can still use the v1.
 * Also this image will be in cache alreay.
 */
/**
 * TileImage
 *
 * @API:
 <TileImage
   className="product-img"
   isLazy={this.props.lazyLoad}
   imgUrl={this.props.imgUrl}
   imgAlt={this.props.title}
   width={Constant.PRODUCT_IMG_SIZE}
   height={Constant.PRODUCT_IMG_SIZE}
 />
 */
var DEFAULT_SPACER_IMAGE = "//i5.walmartimages.com/dfw/63fd9f59-33e4/k2-_1255bd77-c218-4f2a-99ce-14731eeaa110.v1.gif";
var CLASS_LAZY = "lazy";

var TileImage = function (_React$Component) {
  (0, _inherits3.default)(TileImage, _React$Component);

  function TileImage() {
    (0, _classCallCheck3.default)(this, TileImage);
    return (0, _possibleConstructorReturn3.default)(this, _React$Component.apply(this, arguments));
  }

  TileImage.prototype.render = function render() {
    var props = this.props;
    var imageSize = { width: props.width, height: props.height };
    var imgProps = void 0;
    var torbitUrl = void 0;

    //TODO: remove the weird === "null", when preso fix it
    if (!props.imgUrl || props.imgUrl === "null") {
      return null;
    }

    imgProps = {
      className: props.className,
      width: props.width,
      height: props.height,
      alt: props.imgAlt,
      src: DEFAULT_SPACER_IMAGE
    };

    torbitUrl = (0, _wmreactImageUtils.checkImageSrc)(props.imgUrl, imageSize.width, imageSize.height);

    if (props.isLazy) {
      imgProps.className += " " + CLASS_LAZY;
      if (props.dataUrlName) {
        imgProps[props.dataUrlName] = torbitUrl;
      }
    } else {
      imgProps.src = torbitUrl;
    }

    return _react2.default.createElement("img", imgProps);
  };

  return TileImage;
}(_react2.default.Component);

exports.default = TileImage;


TileImage.displayName = "TileImage";
TileImage.propTypes = {
  /**
    Product Image Url
  */
  "imgUrl": _react2.default.PropTypes.string.isRequired,
  /**
    Class name
  */
  "className": _react2.default.PropTypes.string,
  /**
    A flag to determine if Lazyloading is enabled
  */
  "isLazy": _react2.default.PropTypes.bool,
  /**
    A flag to determine whether torbit is enabled
  */
  "useTorbit": _react2.default.PropTypes.bool,
  /**
    Image alt attribute
  */
  "imgAlt": _react2.default.PropTypes.string,
  /**
    Image Height
  */
  "height": _react2.default.PropTypes.number,
  /**
    Image Width
  */
  "width": _react2.default.PropTypes.number,
  /**
    data url name
  */
  "dataUrlName": _react2.default.PropTypes.string
};

TileImage.defaultProps = {
  className: "Tile-img",
  isLazy: false,
  useTorbit: false,
  imgUrl: null,
  imgAlt: "image",
  height: 144,
  width: 144,
  dataUrlName: "data-lazy"
};

exports.default = TileImage;